(definec in (a :all x :tl) :bool
  (and (consp x)
       (or (== a (car x))
           (in a (cdr x)))))

(definec ap (x y :tl) :tl
  (if (endp x)
      y
    (cons (car x) (ap (cdr x) y))))

(definec rv (x :tl) :tl
  (if (endp x)
      x
    (ap (rv (cdr x)) (list (car x)))))

(definec rem-dups (x :tl) :tl
  (cond ((endp x) x)
        ((in (car x) (cdr x))
         (rem-dups (cdr x)))
        (t (cons (car x) (rem-dups (cdr x))))))

; You get this property for free, since we did it in class.  See
; l26.proof for the proof checker proof. You will have to do similar
; proofs for this homework.

(property ap-assoc (x y z :tl)
  (== (ap (ap x y) z)
      (ap x (ap y z))))

; The first two lemmas are proof checker proofs of in-ap using
; different induction schemes.

Lemma in-ap1:
(=> (^ (tlp x) (tlp y))
    (== (in a (ap x y))
        (v (in a x) (in a y))))

Proof by: Induction on (in a x)

XXX

Lemma in-ap2:
(=> (^ (tlp x) (tlp y))
    (== (in a (ap x y))
        (v (in a x) (in a y))))

Proof by: Induction on (tlp x)

XXX

#|

 Which of the following induction schemes is not viable
 to prove Conjecture in-ap2?
 
 1. (ap x y)
 2. (in a y)

 Explain why not by showing where a proof attempt using the non-viable
 induction scheme fails.

 XXX

|#

; Notice that you can use lemmas you have proved in subsequent proofs,
; e.g., you can use in-ap1 in the proof of in-rv or any other subsequent lemma.

Lemma in-rv:
(=> (tlp x)
    (== (in a (rv x))
        (in a x)))

Proof by: Induction on (rv x)

XXX

; This is a proof of in-rem-dups
; Use whatever induction scheme you like.
Lemma in-rem-dups:
(=> (tlp x)
    (== (in a (rem-dups x))
        (in a x)))

XXX

#|

 Formalize this property and prove it using the above lemmas.
 Hint: do not use induction, just equational reasoning!

 (property (el :all a b c d :tl)
   (== (in el (rem-dups (rv (rem-dups (rv (ap (rv (ap (rv (ap a b)) (ap a c))) d))))))
       (v (in el a) (in el b) (in el c) (in el d))))

|#

Conjecture sanity-check:

XXX

; Prove the following lemma. You will need helper lemmas.
; Hint: the lecture notes are your friend.
Lemma rv-rv:
(=> (tlp x)
    (== (rv (rv x))
        x))

; Here is another function that your mentor wants you to reason about.
(definec make-n-xs (n :nat x :all) :tl
  (if (zp n)
      nil
    (cons x (make-n-xs (1- n) x))))

; She claims that the following is a theorem you should prove.
; Actually, it isn't a theorem. Think about why and change the RHS as
; little as possible to make this a theorem and prove it. You can only
; change the RHS.
;
; The prove it using whatever induction scheme you like.
Lemma in-make-n-xs
(=> (natp x)
    (== (in a (make-n-xs x y))
        (== a y)))

XXX

; Your mentor is busy building her compiler and you have some free
; time. After doing some LeetCode exercises, you get bored and decide
; to go talk to the AI team. They are building an AI that can solve
; recurrence relations. They gave you a few examples that they want to
; be able to solve.
;
; Find closed form solutions and prove them correct.

(definec r1 (n :nat) :pos
  (if (zp n)
      1
    (+ (r1 (1- n)) (expt 2 n))))

; Use whatever induction scheme you like
Lemma r1-closed-form:
(=> (natp n)
    (= (r1 n)
       XXX))

XXX

(definec r2 (n :pos) :int
  :skip-tests t
  (match n
    (1 0)
    (2 3)
    (3 8)
    (& (+ (r2 (1- n)) (r2 (- n 2)) (- (r2 (- n 3))) 4))))

; Use whatever induction scheme you like
Lemma r2-closed-form:
(=> (posp n)
    (= (r2 n)
       XXX))

XXX

; After doing the above proofs, you decide to see if ACL2s can do this
; for you.
;
; Write Lemma r1-closed-form in ACL2s as a property and see if ACL2s
; can prove it automatically (use .lisp file for that).

(property (n :nat)
  (= (r1 n)
     XXX))

; Write Lemma r2-closed-form in ACL2s as a property and see if ACL2s
; can prove it automatically (use .lisp file for that).

(property (n :pos)
  (= (r2 n)
     XXX))

; This gives you an idea, which you pitch to the AI team. To test
; their system, they can use their AI solver to propose solutions to
; recurrences, which then get translated to ACL2s properties that can
; be checked using testing and/or theorem proving.
;
; They try it and find lots of bugs, ah the joys of AI.
;
; The one downside of your coop experience is you have to figure out
; whether to accept the return offer from the compiler team or the AI
; team. Which one will you choose? Tell us below. (Free points)

"XXX"
